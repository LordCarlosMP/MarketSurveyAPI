plugins {
    id 'java'
    id 'idea'
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
    id 'org.jetbrains.kotlin.jvm' version '1.2.51'
    id "org.jetbrains.kotlin.plugin.spring" version "1.2.51"
    id 'org.springframework.boot' version '2.0.3.RELEASE'
    id 'com.palantir.docker' version "0.20.1"
    id "org.jetbrains.kotlin.plugin.noarg" version "1.2.51"
    id 'com.sourcemuse.mongo' version '1.0.6'
    id "org.jetbrains.dokka" version "0.9.17"
}


bootJar {
    baseName = 'marketsurveyapi'
    version = '0.1.0'
}

repositories {
    mavenCentral()
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.2.51'
    compile group: 'it.sauronsoftware.cron4j', name: 'cron4j', version: '2.2.5'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect'
    compile group: 'org.mongodb.morphia', name: 'morphia', version: '1.3.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
}

docker {
    dependsOn build as Task
    name "lordcarlosmp/${bootJar.baseName}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

noArg {
    annotation("org.mongodb.morphia.annotations.Embedded")
    annotation("org.mongodb.morphia.annotations.Entity")
}

mongo {
    port 12345
    logging 'console'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    runWithMongoDb = true
    outputs.upToDateWhen { false }
    mustRunAfter test
    dependsOn startMongoDb
    finalizedBy stopMongoDb
}

check.dependsOn integrationTest

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
        testSourceDirs += project.sourceSets.integrationTest.kotlin.srcDirs
        testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    }
}